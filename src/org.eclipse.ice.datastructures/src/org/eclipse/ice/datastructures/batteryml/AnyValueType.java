//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.10.22 at 11:59:10 AM EDT 
//


package org.eclipse.ice.datastructures.batteryml;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElementRef;
import javax.xml.bind.annotation.XmlElementRefs;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import javax.xml.datatype.XMLGregorianCalendar;


/**
 * Base type for all series values. Can have multiple elements. To be restricted.
 * 
 * <p>Java class for AnyValueType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AnyValueType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;choice maxOccurs="unbounded">
 *           &lt;element ref="{BatteryML:2.0}Int32"/>
 *           &lt;element ref="{BatteryML:2.0}Int64"/>
 *           &lt;element ref="{BatteryML:2.0}PositiveInt"/>
 *           &lt;element ref="{BatteryML:2.0}NonNegativeInt"/>
 *           &lt;element ref="{BatteryML:2.0}NonNegativeInt32"/>
 *           &lt;element ref="{BatteryML:2.0}NonNegativeInt64"/>
 *           &lt;element ref="{BatteryML:2.0}Float32"/>
 *           &lt;element ref="{BatteryML:2.0}Float64"/>
 *           &lt;element ref="{BatteryML:2.0}String"/>
 *           &lt;element ref="{BatteryML:2.0}ShortString"/>
 *           &lt;element ref="{BatteryML:2.0}ShortToken"/>
 *           &lt;element ref="{BatteryML:2.0}ShortName"/>
 *           &lt;element ref="{BatteryML:2.0}Boolean"/>
 *           &lt;element ref="{BatteryML:2.0}DateTime"/>
 *           &lt;element ref="{BatteryML:2.0}Encoded64"/>
 *           &lt;element ref="{BatteryML:2.0}EmbeddedXML"/>
 *         &lt;/choice>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AnyValueType", propOrder = {
    "int32OrInt64OrPositiveInt"
})
@XmlSeeAlso({
    AnyNumericValueType.class,
    AnySingleValueType.class
})
public class AnyValueType {

    @XmlElementRefs({
        @XmlElementRef(name = "Int32", namespace = "BatteryML:2.0", type = JAXBElement.class),
        @XmlElementRef(name = "NonNegativeInt64", namespace = "BatteryML:2.0", type = JAXBElement.class),
        @XmlElementRef(name = "ShortToken", namespace = "BatteryML:2.0", type = JAXBElement.class),
        @XmlElementRef(name = "String", namespace = "BatteryML:2.0", type = JAXBElement.class),
        @XmlElementRef(name = "PositiveInt", namespace = "BatteryML:2.0", type = JAXBElement.class),
        @XmlElementRef(name = "Boolean", namespace = "BatteryML:2.0", type = JAXBElement.class),
        @XmlElementRef(name = "Float32", namespace = "BatteryML:2.0", type = JAXBElement.class),
        @XmlElementRef(name = "NonNegativeInt32", namespace = "BatteryML:2.0", type = JAXBElement.class),
        @XmlElementRef(name = "ShortString", namespace = "BatteryML:2.0", type = JAXBElement.class),
        @XmlElementRef(name = "Encoded64", namespace = "BatteryML:2.0", type = JAXBElement.class),
        @XmlElementRef(name = "NonNegativeInt", namespace = "BatteryML:2.0", type = JAXBElement.class),
        @XmlElementRef(name = "ShortName", namespace = "BatteryML:2.0", type = JAXBElement.class),
        @XmlElementRef(name = "EmbeddedXML", namespace = "BatteryML:2.0", type = JAXBElement.class),
        @XmlElementRef(name = "Float64", namespace = "BatteryML:2.0", type = JAXBElement.class),
        @XmlElementRef(name = "DateTime", namespace = "BatteryML:2.0", type = JAXBElement.class),
        @XmlElementRef(name = "Int64", namespace = "BatteryML:2.0", type = JAXBElement.class)
    })
    protected List<JAXBElement<?>> int32OrInt64OrPositiveInt;

    /**
     * Gets the value of the int32OrInt64OrPositiveInt property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the int32OrInt64OrPositiveInt property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getInt32OrInt64OrPositiveInt().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link JAXBElement }{@code <}{@link Integer }{@code >}
     * {@link JAXBElement }{@code <}{@link BigInteger }{@code >}
     * {@link JAXBElement }{@code <}{@link String }{@code >}
     * {@link JAXBElement }{@code <}{@link String }{@code >}
     * {@link JAXBElement }{@code <}{@link Long }{@code >}
     * {@link JAXBElement }{@code <}{@link Boolean }{@code >}
     * {@link JAXBElement }{@code <}{@link Float }{@code >}
     * {@link JAXBElement }{@code <}{@link Long }{@code >}
     * {@link JAXBElement }{@code <}{@link String }{@code >}
     * {@link JAXBElement }{@code <}{@link byte[]}{@code >}
     * {@link JAXBElement }{@code <}{@link Long }{@code >}
     * {@link JAXBElement }{@code <}{@link String }{@code >}
     * {@link JAXBElement }{@code <}{@link Double }{@code >}
     * {@link JAXBElement }{@code <}{@link String }{@code >}
     * {@link JAXBElement }{@code <}{@link XMLGregorianCalendar }{@code >}
     * {@link JAXBElement }{@code <}{@link Long }{@code >}
     * 
     * 
     */
    public List<JAXBElement<?>> getInt32OrInt64OrPositiveInt() {
        if (int32OrInt64OrPositiveInt == null) {
            int32OrInt64OrPositiveInt = new ArrayList<JAXBElement<?>>();
        }
        return this.int32OrInt64OrPositiveInt;
    }

}
