Welcome to the Updater README!

The Updater allows ICE users to transmit information concerning the ongoing simulation in near real-time to the ICECore.The information is transmitted to a URL with the POST method using the HTTP or HTTPS protocol and cURL. After instantiation of Updater, the user program can call start() and stop() to begin and end the transmission thread. After starting Updater, the user program can call postMessage(), postFileCreated(), postFileModified(), postFileDeleted(), updateProgress() and updateConvergence() to append Post objects to a queue. At each cycle of the thread, all posts in the queue are transmitted to the provided URL in the JSON format. These messages are intended to be consumed by a running instance of ICECore and broadcasted to any number of ICEClient objects or other client program such as simple web page.

Section 1: How to Build the Updater

Updater uses the CMake build system to compile and install a static library, a shared library and the header files to a local directory. The CMake system also sets up the Updater tests, generates the Updater API documentation and uses CPack to create binary distributions.

Issue the following commands in the org.eclipse.ice.updater directory to configure the build system:

mkdir build
cd build
cmake .. -DBUILD_PATH=$PWD -DTESTS_BUILD_PATH=$PWD/tests/

If you want a more advanced build that includes support for an Eclipse Project and changes the install directory, you can use a cmake script that is a little more complicated:

cmake -G"Eclipse CDT4 - Unix Makefiles" -DCMAKE_ECLIPSE_GENERATE_SOURCE_PROJECT=TRUE -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX -DBUILD_PATH=$PWD -DTESTS_BUILD_PATH=$PWD/tests/ $SRC_PATH

where $INSTALL_PREFIX is a directory of your choice.

Your system must have a C++ compiler available as well as a few other dependencies. These include cURL, Boost 1.4, and CMake 2.8 and cURL and Boost must have the development headers installed as well. In addition, the Updater tests require QtTest and a web server equipped with PHP 5.2. 

The Updater libraries and header files will be installed in the "lib" and "include" subdirectories of install prefix. 

If you configure the updater with the option to create an Eclipse project as shown above, you can import this project into your workspace from Eclipse using File > Import > General > Existing Projects into Workspace and select the org.eclipse.ice.updater/build directory. 

Section 2: How to Configure and Use the Updater

The Updater requires a properly formatted "updater.properties" file as input. This properties file is in the Java properties format as a set of 3 <name>=<value> pairs separated by a new line character. The properties are "item_id", "client_key" and "url". The "item_id" property provides the item id for the simulation's plug-in. The "client_key" property provides a unique 40 character alpha-numeric session value. The "url" property provides the url of the running ICECore instance used to accept transmissions from the Updater. An example of this file is located in the top level directory of the project. In most instances, this file will be automatically generated by the ICECore and written to the same directory as the executable. In this case, the Updater's nullary constructor should be used. In some instances, a custom properties file may be required. In this case, the parameterized constructor should be used. This constructor expects an istream object containing the contents of the custom properties file. When executing the Updater's tests, set the value of "url" to point to the location of the UpdaterTester.php file. For more information on Updater's testing regime, please see Section 3: Configuring and Executing the Updater Tests section of this README.

Using the Updater API in your simulation code is very straight forward. Simply create a new Updater instance using one of the constructors and call the start() function to begin transmitting your posts every 1000 milliseconds. When you are finished transmitting posts to the ICECore, call the stop() function. As previously mentioned, you can transmit custom plain text messages, progress and convergence status, and messages detailing the creation, modification and deletion of files. Submitted text messages and file paths are limited to 256 characters and will be truncated beyond that limit. The values of progress and convergence must be between 0 and 100. Any submitted progress and convergence values below 0 will be mapped to 0 and any values above 100 will be mapped to 100.

Section 3: How to Configure and Execute the Updater Tests

In order to setup and execute the Updater tests, you must have read and write access to a directory on a machine that is accessible over HTTP or HTTPS with PHP installed. You must copy three files to this directory: SampleText.txt, PostTester.php and UpdaterTester.php. You can find all of these files in the org.eclipse.ice.updater/tests directory.

The Updater tests also require a properties file called "updatertests.properties". This properties file is in the Java properties format as a set of 4 <name>=<value> pairs separated by a new line character. The properties are "max_number_of_posts", "max_post_time_interval", "url_path" and "ignore_ssl_peer_verification". The "url_path" value is the path to the directory where you copied the SampleText.txt, PostTester.php and UpdaterTester.php files. The checkPostUpdating1() and checkPostUpdating2() tests in the UpdaterTester class selects a random number of posts between 1 and the "max_number_of_posts" value. The amount of time between each of these random number of posts is another random number between 100 and "max_post_time_interval" milliseconds. The type of each post is randomly selected using a uniform distribution. In addition, you will have to configure the the "url" parameter listed in the "updater.properties" file located in the same directory to point to the location of the UpdaterTester.php file. If you are using HTTPS urls pointing to a web server with an SSL certificate that was not generated by a Certificate Authority (e.g., a "self-signed" certificate), then you must set the value of "ignore_ssl_peer_verification" is set to true. WARNING: SETTING THE VALUE OF "ignore_ssl_peer_verification" TO TRUE IS NOT SAFE FOR PRODUCTION USE AND SHOULD ONLY BE USED FOR TESTING PURPOSES!

After the files have been copied and the "updatertests.properties" configured, you can execute the tests. From command line, simply change directory to the org.eclipse.ice.updater.build directory and execute the following command: "make test". From Eclipse, you must first import the org.eclipse.ice.updater.build project into your workspace as instructed in Section 1: How to Build the Updater. Then open the Make Target view by going to Window > Show View > Other and selecting Make > Make Target. From the Make Target view, open the org.eclipse.ice.updater.build tree node and double click on the "test" target. Since the UpdaterTester tests execute a random number 
of transmissions over a randomly selected time frame, the amount of time required to complete the tests will vary according to the values you inserted in the "updatertests.properties" file. Besides UpdaterTester, the PostTester and LibcurlUtilsTester classes perform tests as well. After successfully executing the UpdaterTester tests, the output of the tests will be available in the "url_path" directory on the remote machine. UpdaterTester.txt contains the name/value pairs transmitted to UpdaterTester.php and UpdaterTester.json contains the raw JSON-formatted output that was parsed to create the UpdaterTester.txt file. 

Section 4: How to Install the Updater Libraries and Headers 

Updater can be installed locally as a static library or a shared library accompanied by several header files. From command line, simply change directory to the org.eclipse.ice.updater.build directory and execute the following command: "make install".From Eclipse, you must first import the org.eclipse.ice.updater.build project into your workspace as instructed in Section 1: How to Build the Updater. Then open the Make Target view by going to Window > Show View > Other and selecting Make > Make Target. From the Make Target view, open the org.eclipse.ice.updater.build tree node and double click on "install" target. This command will install both libraries in the "lib" subdirectory and the header files in the "include" subdirectory of the path assigned to INSTALL_PREFIX in the cmake_build_script file. Please see Section 1: How to Build the Updater for more details concerning the INSTALL_PREFIX variable. 

Section 5: How to Generate API Documentation

Updater API documentation is created using Doxygen is generated as a set of web pages, as a pdf, as a latex document and as a man page. From command line, simply change directory to the org.eclipse.ice.updater.build directory and execute the following command: "make doc". From Eclipse, you must first import the org.eclipse.ice.updater.build project into your workspace as instructed in in Section 1: How to Build the Updater. Then open the Make Target view by going to Window > Show View > Other and selecting Make > Make Target. From the Make Target view, open the org.eclipse.ice.updater.build tree node and double click on "doc" target. This command will generate the Updater's API documentation in the documentation directory in org.eclipse.ice.updater.build. 

Section 6: How to Package Updater for Distribution

The Updater static and shared libraries as well as its header files can easily be packaged for distribution as a deb, rpm, tgz or zip file. From command line, simply change directory to the org.eclipse.ice.updater.build directory and execute the following command: "make package". From Eclipse, you must first import the org.eclipse.ice.updater.build project into your workspace as instructed in in Section 1: How to Build the Updater. Then open the Make Target view by going to Window > Show View > Other and selecting Make > Make Target. From the Make Target view, open the org.eclipse.ice.updater.build tree node and double click on "package" target. This command will create packages in the rpm, deb, tgz and zip containers in the org.eclipse.ice.updater.build directory. 

Author Contact: billingsjj@ornl.gov
Version: 2.0.0
Date: 06/13/2012
