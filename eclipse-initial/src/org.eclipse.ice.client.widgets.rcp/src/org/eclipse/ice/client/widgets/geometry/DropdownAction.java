/*******************************************************************************
 * Copyright (c) 2012, 2014 UT-Battelle, LLC.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Initial API and implementation and/or initial documentation - Jay Jay Billings,
 *   Jordan H. Deyton, Dasha Gorin, Alexander J. McCaskey, Taylor Patterson,
 *   Claire Saunders, Matthew Wang, Anna Wojtowicz
 *******************************************************************************/
package org.eclipse.ice.client.widgets.geometry;

import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import org.eclipse.jface.action.Action;
import org.eclipse.jface.action.ActionContributionItem;
import org.eclipse.jface.action.IAction;
import org.eclipse.jface.action.IMenuCreator;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.widgets.Control;
import org.eclipse.ui.internal.util.BundleUtility;
import org.osgi.framework.Bundle;
import org.osgi.framework.FrameworkUtil;

/**
 * <!-- begin-UML-doc -->
 * <p>
 * Action with a dropdown button and a simple capability for adding child
 * actions
 * </p>
 * <!-- end-UML-doc -->
 * 
 * @author abd
 * @generated 
 *            "UML to Java (com.ibm.xtools.transform.uml2.java5.internal.UML2JavaTransform)"
 */
public class DropdownAction extends Action implements IMenuCreator {

	@Override
	public ImageDescriptor getImageDescriptor() {
		// TODO Auto-generated method stub
		return super.getImageDescriptor();
	}

	/**
	 * The root menu containing all the actions
	 */
	private Menu menu;

	/**
	 * The actions to display when this dropdown action is expanded
	 */
	private List<Action> childActions = new ArrayList<Action>();

	/**
	 * The image descriptor associated with the duplicate action's icon
	 */
	private ImageDescriptor imageDescriptor;

	/**
	 * <!-- begin-UML-doc -->
	 * <p>
	 * Creates a dropdown action with a text label
	 * </p>
	 * <!-- end-UML-doc -->
	 * 
	 * @param text
	 *            <p>
	 *            The label text to appear on the action button
	 *            </p>
	 * @generated 
	 *            "UML to Java (com.ibm.xtools.transform.uml2.java5.internal.UML2JavaTransform)"
	 */
	public DropdownAction(String text) {
		// begin-user-code

		super(text, IAction.AS_DROP_DOWN_MENU);
		setMenuCreator(this);

		// end-user-code
	}

	/**
	 * <!-- begin-UML-doc -->
	 * <p>
	 * Creates a dropdown action with an icon label
	 * </p>
	 * <!-- end-UML-doc -->
	 * 
	 * @param text
	 *            <p>
	 *            The tooltip text
	 *            </p>
	 * @param imageFilename
	 *            <p>
	 *            The filename of the icon image, relative to the OSGi bundle
	 *            location
	 *            </p>
	 * @generated 
	 *            "UML to Java (com.ibm.xtools.transform.uml2.java5.internal.UML2JavaTransform)"
	 */
	public DropdownAction(String text, String imageFilename) {
		// begin-user-code

		this(text);

		// Load the icon image

		Bundle bundle = FrameworkUtil.getBundle(getClass());
		URL imagePath = BundleUtility.find(bundle, imageFilename);
		imageDescriptor = ImageDescriptor.createFromURL(imagePath);

		// end-user-code
	}

	/**
	 * <!-- begin-UML-doc -->
	 * <p>
	 * Cleans up and disposes internal Menu instance
	 * </p>
	 * <!-- end-UML-doc -->
	 * 
	 * @generated 
	 *            "UML to Java (com.ibm.xtools.transform.uml2.java5.internal.UML2JavaTransform)"
	 */
	public void dispose() {
		// begin-user-code

		if (menu != null) {
			menu.dispose();
			menu = null;
		}

		// end-user-code
	}

	/**
	 * <!-- begin-UML-doc -->
	 * <p>
	 * Returns null in this implementation
	 * </p>
	 * <!-- end-UML-doc -->
	 * 
	 * @param parent
	 *            <p>
	 *            The parent Menu
	 *            </p>
	 * @return <p>
	 *         The generated menu
	 *         </p>
	 * @generated 
	 *            "UML to Java (com.ibm.xtools.transform.uml2.java5.internal.UML2JavaTransform)"
	 */
	public Menu getMenu(Menu parent) {
		// begin-user-code
		return null;
		// end-user-code
	}

	/**
	 * <!-- begin-UML-doc -->
	 * <p>
	 * Returns the Menu generated by this DropdownAction
	 * </p>
	 * <!-- end-UML-doc -->
	 * 
	 * @param parent
	 *            <p>
	 *            The parent Control instance
	 *            </p>
	 * @return <p>
	 *         The menu generated by this DropdownAction
	 *         </p>
	 * @generated 
	 *            "UML to Java (com.ibm.xtools.transform.uml2.java5.internal.UML2JavaTransform)"
	 */
	public Menu getMenu(Control parent) {
		// begin-user-code

		// Dispose of the old menu

		if (menu != null) {
			menu.dispose();
		}
		// Put all the actions into a new menu

		menu = new Menu(parent);

		for (Action action : childActions) {
			ActionContributionItem item = new ActionContributionItem(action);
			item.fill(menu, -1);
		}

		return menu;

		// end-user-code
	}

	/**
	 * <!-- begin-UML-doc -->
	 * <p>
	 * Appends an Action to the bottom of the current menu
	 * </p>
	 * <!-- end-UML-doc -->
	 * 
	 * @param action
	 *            <p>
	 *            The Action to append
	 *            </p>
	 * @generated 
	 *            "UML to Java (com.ibm.xtools.transform.uml2.java5.internal.UML2JavaTransform)"
	 */
	public void addAction(Action action) {
		// begin-user-code

		childActions.add(action);

		// end-user-code
	}
}